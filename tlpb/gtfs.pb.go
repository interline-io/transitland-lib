// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: gtfs.proto

package tlpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WheelchairAccess int32

const (
	WheelchairAccess_WheelchairUnknown    WheelchairAccess = 0
	WheelchairAccess_WheelchairAllowed    WheelchairAccess = 1
	WheelchairAccess_WheelchairDisallowed WheelchairAccess = 2
)

// Enum value maps for WheelchairAccess.
var (
	WheelchairAccess_name = map[int32]string{
		0: "WheelchairUnknown",
		1: "WheelchairAllowed",
		2: "WheelchairDisallowed",
	}
	WheelchairAccess_value = map[string]int32{
		"WheelchairUnknown":    0,
		"WheelchairAllowed":    1,
		"WheelchairDisallowed": 2,
	}
)

func (x WheelchairAccess) Enum() *WheelchairAccess {
	p := new(WheelchairAccess)
	*p = x
	return p
}

func (x WheelchairAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WheelchairAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[0].Descriptor()
}

func (WheelchairAccess) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[0]
}

func (x WheelchairAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WheelchairAccess.Descriptor instead.
func (WheelchairAccess) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{0}
}

type BikeAccess int32

const (
	BikeAccess_BikeUnknown    BikeAccess = 0
	BikeAccess_BikeAllowed    BikeAccess = 1
	BikeAccess_BikeDisallowed BikeAccess = 2
)

// Enum value maps for BikeAccess.
var (
	BikeAccess_name = map[int32]string{
		0: "BikeUnknown",
		1: "BikeAllowed",
		2: "BikeDisallowed",
	}
	BikeAccess_value = map[string]int32{
		"BikeUnknown":    0,
		"BikeAllowed":    1,
		"BikeDisallowed": 2,
	}
)

func (x BikeAccess) Enum() *BikeAccess {
	p := new(BikeAccess)
	*p = x
	return p
}

func (x BikeAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BikeAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[1].Descriptor()
}

func (BikeAccess) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[1]
}

func (x BikeAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BikeAccess.Descriptor instead.
func (BikeAccess) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{1}
}

type BoardAccess int32

const (
	BoardAccess_BoardUnknown    BoardAccess = 0
	BoardAccess_BoardDisallowed BoardAccess = 1
	BoardAccess_BoardAllowed    BoardAccess = 2
	BoardAccess_BoardCoordinate BoardAccess = 3
)

// Enum value maps for BoardAccess.
var (
	BoardAccess_name = map[int32]string{
		0: "BoardUnknown",
		1: "BoardDisallowed",
		2: "BoardAllowed",
		3: "BoardCoordinate",
	}
	BoardAccess_value = map[string]int32{
		"BoardUnknown":    0,
		"BoardDisallowed": 1,
		"BoardAllowed":    2,
		"BoardCoordinate": 3,
	}
)

func (x BoardAccess) Enum() *BoardAccess {
	p := new(BoardAccess)
	*p = x
	return p
}

func (x BoardAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoardAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[2].Descriptor()
}

func (BoardAccess) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[2]
}

func (x BoardAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoardAccess.Descriptor instead.
func (BoardAccess) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{2}
}

type PickupAccess int32

const (
	PickupAccess_PickupContinuous PickupAccess = 0
	PickupAccess_PickupDisallowed PickupAccess = 1
	PickupAccess_PickupMustPhone  PickupAccess = 2
	PickupAccess_PickupAskDriver  PickupAccess = 3
)

// Enum value maps for PickupAccess.
var (
	PickupAccess_name = map[int32]string{
		0: "PickupContinuous",
		1: "PickupDisallowed",
		2: "PickupMustPhone",
		3: "PickupAskDriver",
	}
	PickupAccess_value = map[string]int32{
		"PickupContinuous": 0,
		"PickupDisallowed": 1,
		"PickupMustPhone":  2,
		"PickupAskDriver":  3,
	}
)

func (x PickupAccess) Enum() *PickupAccess {
	p := new(PickupAccess)
	*p = x
	return p
}

func (x PickupAccess) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PickupAccess) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[3].Descriptor()
}

func (PickupAccess) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[3]
}

func (x PickupAccess) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PickupAccess.Descriptor instead.
func (PickupAccess) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{3}
}

type StopLocationType int32

const (
	StopLocationType_LocationPlatform     StopLocationType = 0
	StopLocationType_LocationStation      StopLocationType = 1
	StopLocationType_LocationEntrance     StopLocationType = 2
	StopLocationType_LocationNode         StopLocationType = 3
	StopLocationType_LocationBoardingArea StopLocationType = 4
)

// Enum value maps for StopLocationType.
var (
	StopLocationType_name = map[int32]string{
		0: "LocationPlatform",
		1: "LocationStation",
		2: "LocationEntrance",
		3: "LocationNode",
		4: "LocationBoardingArea",
	}
	StopLocationType_value = map[string]int32{
		"LocationPlatform":     0,
		"LocationStation":      1,
		"LocationEntrance":     2,
		"LocationNode":         3,
		"LocationBoardingArea": 4,
	}
)

func (x StopLocationType) Enum() *StopLocationType {
	p := new(StopLocationType)
	*p = x
	return p
}

func (x StopLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[4].Descriptor()
}

func (StopLocationType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[4]
}

func (x StopLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopLocationType.Descriptor instead.
func (StopLocationType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{4}
}

type RouteType int32

const (
	RouteType_VehicleTram      RouteType = 0
	RouteType_VehicleSubway    RouteType = 1
	RouteType_VehicleRail      RouteType = 2
	RouteType_VehicleBus       RouteType = 3
	RouteType_VehicleFerry     RouteType = 4
	RouteType_VehicleCablecar  RouteType = 5
	RouteType_VehicleGondola   RouteType = 6
	RouteType_VehicleFunicular RouteType = 7
	RouteType_VehicleTrollebus RouteType = 11
	RouteType_VehicleMonorail  RouteType = 12
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0:  "VehicleTram",
		1:  "VehicleSubway",
		2:  "VehicleRail",
		3:  "VehicleBus",
		4:  "VehicleFerry",
		5:  "VehicleCablecar",
		6:  "VehicleGondola",
		7:  "VehicleFunicular",
		11: "VehicleTrollebus",
		12: "VehicleMonorail",
	}
	RouteType_value = map[string]int32{
		"VehicleTram":      0,
		"VehicleSubway":    1,
		"VehicleRail":      2,
		"VehicleBus":       3,
		"VehicleFerry":     4,
		"VehicleCablecar":  5,
		"VehicleGondola":   6,
		"VehicleFunicular": 7,
		"VehicleTrollebus": 11,
		"VehicleMonorail":  12,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[5].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[5]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{5}
}

type TripDirection int32

const (
	TripDirection_TripDirectionOutbound TripDirection = 0
	TripDirection_TripDirectionInbound  TripDirection = 1
)

// Enum value maps for TripDirection.
var (
	TripDirection_name = map[int32]string{
		0: "TripDirectionOutbound",
		1: "TripDirectionInbound",
	}
	TripDirection_value = map[string]int32{
		"TripDirectionOutbound": 0,
		"TripDirectionInbound":  1,
	}
)

func (x TripDirection) Enum() *TripDirection {
	p := new(TripDirection)
	*p = x
	return p
}

func (x TripDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[6].Descriptor()
}

func (TripDirection) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[6]
}

func (x TripDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TripDirection.Descriptor instead.
func (TripDirection) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{6}
}

type StopTimepoint int32

const (
	StopTimepoint_Approximate        StopTimepoint = 0
	StopTimepoint_StopTimepointExact StopTimepoint = 1
)

// Enum value maps for StopTimepoint.
var (
	StopTimepoint_name = map[int32]string{
		0: "Approximate",
		1: "StopTimepointExact",
	}
	StopTimepoint_value = map[string]int32{
		"Approximate":        0,
		"StopTimepointExact": 1,
	}
)

func (x StopTimepoint) Enum() *StopTimepoint {
	p := new(StopTimepoint)
	*p = x
	return p
}

func (x StopTimepoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopTimepoint) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[7].Descriptor()
}

func (StopTimepoint) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[7]
}

func (x StopTimepoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopTimepoint.Descriptor instead.
func (StopTimepoint) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{7}
}

type CalendarExceptionType int32

const (
	CalendarExceptionType_CalendarUnknown CalendarExceptionType = 0
	CalendarExceptionType_CalendarAdded   CalendarExceptionType = 1
	CalendarExceptionType_CalendarRemoved CalendarExceptionType = 2
)

// Enum value maps for CalendarExceptionType.
var (
	CalendarExceptionType_name = map[int32]string{
		0: "CalendarUnknown",
		1: "CalendarAdded",
		2: "CalendarRemoved",
	}
	CalendarExceptionType_value = map[string]int32{
		"CalendarUnknown": 0,
		"CalendarAdded":   1,
		"CalendarRemoved": 2,
	}
)

func (x CalendarExceptionType) Enum() *CalendarExceptionType {
	p := new(CalendarExceptionType)
	*p = x
	return p
}

func (x CalendarExceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalendarExceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[8].Descriptor()
}

func (CalendarExceptionType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[8]
}

func (x CalendarExceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalendarExceptionType.Descriptor instead.
func (CalendarExceptionType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{8}
}

type FrequencyExactTime int32

const (
	FrequencyExactTime_FrequencyExactTimeFrequency FrequencyExactTime = 0
	FrequencyExactTime_FrequencyExactTimeScheduled FrequencyExactTime = 1
)

// Enum value maps for FrequencyExactTime.
var (
	FrequencyExactTime_name = map[int32]string{
		0: "FrequencyExactTimeFrequency",
		1: "FrequencyExactTimeScheduled",
	}
	FrequencyExactTime_value = map[string]int32{
		"FrequencyExactTimeFrequency": 0,
		"FrequencyExactTimeScheduled": 1,
	}
)

func (x FrequencyExactTime) Enum() *FrequencyExactTime {
	p := new(FrequencyExactTime)
	*p = x
	return p
}

func (x FrequencyExactTime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrequencyExactTime) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[9].Descriptor()
}

func (FrequencyExactTime) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[9]
}

func (x FrequencyExactTime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrequencyExactTime.Descriptor instead.
func (FrequencyExactTime) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{9}
}

type TransferType int32

const (
	TransferType_TransferTypeRecommended TransferType = 0
	TransferType_TransferTypeTimed       TransferType = 1
	TransferType_TransferTypeMinTime     TransferType = 2
	TransferType_TransferTypeDisallowed  TransferType = 3
	TransferType_TransferTypeInSeat      TransferType = 4
	TransferType_TransferTypeMustExit    TransferType = 5
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TransferTypeRecommended",
		1: "TransferTypeTimed",
		2: "TransferTypeMinTime",
		3: "TransferTypeDisallowed",
		4: "TransferTypeInSeat",
		5: "TransferTypeMustExit",
	}
	TransferType_value = map[string]int32{
		"TransferTypeRecommended": 0,
		"TransferTypeTimed":       1,
		"TransferTypeMinTime":     2,
		"TransferTypeDisallowed":  3,
		"TransferTypeInSeat":      4,
		"TransferTypeMustExit":    5,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[10].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[10]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{10}
}

type PathwayDirectionality int32

const (
	PathwayDirectionality_PathwayUnidirectional PathwayDirectionality = 0
	PathwayDirectionality_PathwayBidirectional  PathwayDirectionality = 1
)

// Enum value maps for PathwayDirectionality.
var (
	PathwayDirectionality_name = map[int32]string{
		0: "PathwayUnidirectional",
		1: "PathwayBidirectional",
	}
	PathwayDirectionality_value = map[string]int32{
		"PathwayUnidirectional": 0,
		"PathwayBidirectional":  1,
	}
)

func (x PathwayDirectionality) Enum() *PathwayDirectionality {
	p := new(PathwayDirectionality)
	*p = x
	return p
}

func (x PathwayDirectionality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathwayDirectionality) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[11].Descriptor()
}

func (PathwayDirectionality) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[11]
}

func (x PathwayDirectionality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathwayDirectionality.Descriptor instead.
func (PathwayDirectionality) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{11}
}

type PathwayMode int32

const (
	PathwayMode_PathwayModeUnknown    PathwayMode = 0
	PathwayMode_PathwayModeWalkway    PathwayMode = 1
	PathwayMode_PathwayModeStairs     PathwayMode = 2
	PathwayMode_PathwayModeTravelator PathwayMode = 3
	PathwayMode_PathwayModeEscalator  PathwayMode = 4
	PathwayMode_PathwayModeElevator   PathwayMode = 5
	PathwayMode_PatthwayModeFareGate  PathwayMode = 6
	PathwayMode_PathwayModeExitGate   PathwayMode = 7
)

// Enum value maps for PathwayMode.
var (
	PathwayMode_name = map[int32]string{
		0: "PathwayModeUnknown",
		1: "PathwayModeWalkway",
		2: "PathwayModeStairs",
		3: "PathwayModeTravelator",
		4: "PathwayModeEscalator",
		5: "PathwayModeElevator",
		6: "PatthwayModeFareGate",
		7: "PathwayModeExitGate",
	}
	PathwayMode_value = map[string]int32{
		"PathwayModeUnknown":    0,
		"PathwayModeWalkway":    1,
		"PathwayModeStairs":     2,
		"PathwayModeTravelator": 3,
		"PathwayModeEscalator":  4,
		"PathwayModeElevator":   5,
		"PatthwayModeFareGate":  6,
		"PathwayModeExitGate":   7,
	}
)

func (x PathwayMode) Enum() *PathwayMode {
	p := new(PathwayMode)
	*p = x
	return p
}

func (x PathwayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathwayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[12].Descriptor()
}

func (PathwayMode) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[12]
}

func (x PathwayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathwayMode.Descriptor instead.
func (PathwayMode) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{12}
}

type BookingRuleType int32

const (
	BookingRuleType_BookingRuleTypeRealtime BookingRuleType = 0
	BookingRuleType_BookingRuleTypeSameday  BookingRuleType = 1
	BookingRuleType_BookingRuleTypePriorday BookingRuleType = 2
)

// Enum value maps for BookingRuleType.
var (
	BookingRuleType_name = map[int32]string{
		0: "BookingRuleTypeRealtime",
		1: "BookingRuleTypeSameday",
		2: "BookingRuleTypePriorday",
	}
	BookingRuleType_value = map[string]int32{
		"BookingRuleTypeRealtime": 0,
		"BookingRuleTypeSameday":  1,
		"BookingRuleTypePriorday": 2,
	}
)

func (x BookingRuleType) Enum() *BookingRuleType {
	p := new(BookingRuleType)
	*p = x
	return p
}

func (x BookingRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[13].Descriptor()
}

func (BookingRuleType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[13]
}

func (x BookingRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingRuleType.Descriptor instead.
func (BookingRuleType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{13}
}

type FareMediaType int32

const (
	FareMediaType_FareMediaNone     FareMediaType = 0
	FareMediaType_FareMediaPaper    FareMediaType = 1
	FareMediaType_FareMediaCard     FareMediaType = 2
	FareMediaType_FareMediaOpenLoop FareMediaType = 3
	FareMediaType_FareMediaApp      FareMediaType = 4
)

// Enum value maps for FareMediaType.
var (
	FareMediaType_name = map[int32]string{
		0: "FareMediaNone",
		1: "FareMediaPaper",
		2: "FareMediaCard",
		3: "FareMediaOpenLoop",
		4: "FareMediaApp",
	}
	FareMediaType_value = map[string]int32{
		"FareMediaNone":     0,
		"FareMediaPaper":    1,
		"FareMediaCard":     2,
		"FareMediaOpenLoop": 3,
		"FareMediaApp":      4,
	}
)

func (x FareMediaType) Enum() *FareMediaType {
	p := new(FareMediaType)
	*p = x
	return p
}

func (x FareMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FareMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[14].Descriptor()
}

func (FareMediaType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[14]
}

func (x FareMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FareMediaType.Descriptor instead.
func (FareMediaType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{14}
}

type FareTransferType int32

const (
	FareTransferType_FareTransfer0 FareTransferType = 0
	FareTransferType_FareTransfer1 FareTransferType = 1
	FareTransferType_FareTransfer2 FareTransferType = 2
)

// Enum value maps for FareTransferType.
var (
	FareTransferType_name = map[int32]string{
		0: "FareTransfer0",
		1: "FareTransfer1",
		2: "FareTransfer2",
	}
	FareTransferType_value = map[string]int32{
		"FareTransfer0": 0,
		"FareTransfer1": 1,
		"FareTransfer2": 2,
	}
)

func (x FareTransferType) Enum() *FareTransferType {
	p := new(FareTransferType)
	*p = x
	return p
}

func (x FareTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FareTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[15].Descriptor()
}

func (FareTransferType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[15]
}

func (x FareTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FareTransferType.Descriptor instead.
func (FareTransferType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{15}
}

type DurationLimitType int32

const (
	DurationLimitType_DurationLimit0 DurationLimitType = 0
	DurationLimitType_DurationLimit1 DurationLimitType = 1
	DurationLimitType_DurationLimit2 DurationLimitType = 2
	DurationLimitType_DurationLimit3 DurationLimitType = 3
)

// Enum value maps for DurationLimitType.
var (
	DurationLimitType_name = map[int32]string{
		0: "DurationLimit0",
		1: "DurationLimit1",
		2: "DurationLimit2",
		3: "DurationLimit3",
	}
	DurationLimitType_value = map[string]int32{
		"DurationLimit0": 0,
		"DurationLimit1": 1,
		"DurationLimit2": 2,
		"DurationLimit3": 3,
	}
)

func (x DurationLimitType) Enum() *DurationLimitType {
	p := new(DurationLimitType)
	*p = x
	return p
}

func (x DurationLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[16].Descriptor()
}

func (DurationLimitType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[16]
}

func (x DurationLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationLimitType.Descriptor instead.
func (DurationLimitType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{16}
}

type FareAttributeTransferType int32

const (
	FareAttributeTransferType_FareAttributeTransferTypeDisallowed FareAttributeTransferType = 0
	FareAttributeTransferType_FareAttributeTransferTypeOnce       FareAttributeTransferType = 1
	FareAttributeTransferType_FareAttributeTransferTypeTwice      FareAttributeTransferType = 2
)

// Enum value maps for FareAttributeTransferType.
var (
	FareAttributeTransferType_name = map[int32]string{
		0: "FareAttributeTransferTypeDisallowed",
		1: "FareAttributeTransferTypeOnce",
		2: "FareAttributeTransferTypeTwice",
	}
	FareAttributeTransferType_value = map[string]int32{
		"FareAttributeTransferTypeDisallowed": 0,
		"FareAttributeTransferTypeOnce":       1,
		"FareAttributeTransferTypeTwice":      2,
	}
)

func (x FareAttributeTransferType) Enum() *FareAttributeTransferType {
	p := new(FareAttributeTransferType)
	*p = x
	return p
}

func (x FareAttributeTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FareAttributeTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[17].Descriptor()
}

func (FareAttributeTransferType) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[17]
}

func (x FareAttributeTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FareAttributeTransferType.Descriptor instead.
func (FareAttributeTransferType) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{17}
}

type PaymentMethod int32

const (
	PaymentMethod_PaymentMethodOnboard  PaymentMethod = 0
	PaymentMethod_PaymentMethodOffboard PaymentMethod = 1
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "PaymentMethodOnboard",
		1: "PaymentMethodOffboard",
	}
	PaymentMethod_value = map[string]int32{
		"PaymentMethodOnboard":  0,
		"PaymentMethodOffboard": 1,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfs_proto_enumTypes[18].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_gtfs_proto_enumTypes[18]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{18}
}

type FeedEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agency   *Agency   `protobuf:"bytes,1,opt,name=agency,proto3" json:"agency,omitempty"`
	Stop     *Stop     `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
	Route    *Route    `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Trip     *Trip     `protobuf:"bytes,4,opt,name=trip,proto3" json:"trip,omitempty"`
	StopTime *StopTime `protobuf:"bytes,5,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	Shape    *Shape    `protobuf:"bytes,6,opt,name=shape,proto3" json:"shape,omitempty"`
	Service  *Service  `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *FeedEntity) Reset() {
	*x = FeedEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedEntity) ProtoMessage() {}

func (x *FeedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedEntity.ProtoReflect.Descriptor instead.
func (*FeedEntity) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{0}
}

func (x *FeedEntity) GetAgency() *Agency {
	if x != nil {
		return x.Agency
	}
	return nil
}

func (x *FeedEntity) GetStop() *Stop {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *FeedEntity) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *FeedEntity) GetTrip() *Trip {
	if x != nil {
		return x.Trip
	}
	return nil
}

func (x *FeedEntity) GetStopTime() *StopTime {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *FeedEntity) GetShape() *Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *FeedEntity) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type Agency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyId       *EntityID `protobuf:"bytes,1,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
	AgencyName     string    `protobuf:"bytes,2,opt,name=agency_name,json=agencyName,proto3" json:"agency_name,omitempty"`
	AgencyUrl      *Url      `protobuf:"bytes,3,opt,name=agency_url,json=agencyUrl,proto3" json:"agency_url,omitempty"`
	AgencyTimezone *Timezone `protobuf:"bytes,4,opt,name=agency_timezone,json=agencyTimezone,proto3" json:"agency_timezone,omitempty"`
	AgencyLang     *Language `protobuf:"bytes,5,opt,name=agency_lang,json=agencyLang,proto3" json:"agency_lang,omitempty"`
	AgencyPhone    string    `protobuf:"bytes,6,opt,name=agency_phone,json=agencyPhone,proto3" json:"agency_phone,omitempty"`
	AgencyFareUrl  *Url      `protobuf:"bytes,7,opt,name=agency_fare_url,json=agencyFareUrl,proto3" json:"agency_fare_url,omitempty"`
	AgencyEmail    *Email    `protobuf:"bytes,8,opt,name=agency_email,json=agencyEmail,proto3" json:"agency_email,omitempty"`
}

func (x *Agency) Reset() {
	*x = Agency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agency) ProtoMessage() {}

func (x *Agency) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agency.ProtoReflect.Descriptor instead.
func (*Agency) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{1}
}

func (x *Agency) GetAgencyId() *EntityID {
	if x != nil {
		return x.AgencyId
	}
	return nil
}

func (x *Agency) GetAgencyName() string {
	if x != nil {
		return x.AgencyName
	}
	return ""
}

func (x *Agency) GetAgencyUrl() *Url {
	if x != nil {
		return x.AgencyUrl
	}
	return nil
}

func (x *Agency) GetAgencyTimezone() *Timezone {
	if x != nil {
		return x.AgencyTimezone
	}
	return nil
}

func (x *Agency) GetAgencyLang() *Language {
	if x != nil {
		return x.AgencyLang
	}
	return nil
}

func (x *Agency) GetAgencyPhone() string {
	if x != nil {
		return x.AgencyPhone
	}
	return ""
}

func (x *Agency) GetAgencyFareUrl() *Url {
	if x != nil {
		return x.AgencyFareUrl
	}
	return nil
}

func (x *Agency) GetAgencyEmail() *Email {
	if x != nil {
		return x.AgencyEmail
	}
	return nil
}

type Stop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopId             *EntityID        `protobuf:"bytes,1,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
	StopCode           string           `protobuf:"bytes,2,opt,name=stop_code,json=stopCode,proto3" json:"stop_code,omitempty"`
	StopName           string           `protobuf:"bytes,3,opt,name=stop_name,json=stopName,proto3" json:"stop_name,omitempty"`
	TtsStopName        string           `protobuf:"bytes,4,opt,name=tts_stop_name,json=ttsStopName,proto3" json:"tts_stop_name,omitempty"`
	StopDesc           string           `protobuf:"bytes,5,opt,name=stop_desc,json=stopDesc,proto3" json:"stop_desc,omitempty"`
	StopLat            float64          `protobuf:"fixed64,6,opt,name=stop_lat,json=stopLat,proto3" json:"stop_lat,omitempty"`
	StopLon            float64          `protobuf:"fixed64,7,opt,name=stop_lon,json=stopLon,proto3" json:"stop_lon,omitempty"`
	ZoneId             string           `protobuf:"bytes,8,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	StopUrl            *Url             `protobuf:"bytes,9,opt,name=stop_url,json=stopUrl,proto3" json:"stop_url,omitempty"`
	LocationType       StopLocationType `protobuf:"varint,10,opt,name=location_type,json=locationType,proto3,enum=StopLocationType" json:"location_type,omitempty"`
	ParentStation      *Reference       `protobuf:"bytes,11,opt,name=parent_station,json=parentStation,proto3" json:"parent_station,omitempty"`
	StopTimezone       *Timezone        `protobuf:"bytes,12,opt,name=stop_timezone,json=stopTimezone,proto3" json:"stop_timezone,omitempty"`
	WheelchairBoarding WheelchairAccess `protobuf:"varint,13,opt,name=wheelchair_boarding,json=wheelchairBoarding,proto3,enum=WheelchairAccess" json:"wheelchair_boarding,omitempty"`
	LevelId            *Reference       `protobuf:"bytes,14,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	PlatformCode       string           `protobuf:"bytes,15,opt,name=platform_code,json=platformCode,proto3" json:"platform_code,omitempty"`
}

func (x *Stop) Reset() {
	*x = Stop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stop) ProtoMessage() {}

func (x *Stop) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stop.ProtoReflect.Descriptor instead.
func (*Stop) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{2}
}

func (x *Stop) GetStopId() *EntityID {
	if x != nil {
		return x.StopId
	}
	return nil
}

func (x *Stop) GetStopCode() string {
	if x != nil {
		return x.StopCode
	}
	return ""
}

func (x *Stop) GetStopName() string {
	if x != nil {
		return x.StopName
	}
	return ""
}

func (x *Stop) GetTtsStopName() string {
	if x != nil {
		return x.TtsStopName
	}
	return ""
}

func (x *Stop) GetStopDesc() string {
	if x != nil {
		return x.StopDesc
	}
	return ""
}

func (x *Stop) GetStopLat() float64 {
	if x != nil {
		return x.StopLat
	}
	return 0
}

func (x *Stop) GetStopLon() float64 {
	if x != nil {
		return x.StopLon
	}
	return 0
}

func (x *Stop) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *Stop) GetStopUrl() *Url {
	if x != nil {
		return x.StopUrl
	}
	return nil
}

func (x *Stop) GetLocationType() StopLocationType {
	if x != nil {
		return x.LocationType
	}
	return StopLocationType_LocationPlatform
}

func (x *Stop) GetParentStation() *Reference {
	if x != nil {
		return x.ParentStation
	}
	return nil
}

func (x *Stop) GetStopTimezone() *Timezone {
	if x != nil {
		return x.StopTimezone
	}
	return nil
}

func (x *Stop) GetWheelchairBoarding() WheelchairAccess {
	if x != nil {
		return x.WheelchairBoarding
	}
	return WheelchairAccess_WheelchairUnknown
}

func (x *Stop) GetLevelId() *Reference {
	if x != nil {
		return x.LevelId
	}
	return nil
}

func (x *Stop) GetPlatformCode() string {
	if x != nil {
		return x.PlatformCode
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId           *EntityID    `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	AgencyId          *Reference   `protobuf:"bytes,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
	RouteShortName    string       `protobuf:"bytes,3,opt,name=route_short_name,json=routeShortName,proto3" json:"route_short_name,omitempty"`
	RouteLongName     string       `protobuf:"bytes,4,opt,name=route_long_name,json=routeLongName,proto3" json:"route_long_name,omitempty"`
	RouteDesc         string       `protobuf:"bytes,5,opt,name=route_desc,json=routeDesc,proto3" json:"route_desc,omitempty"`
	RouteType         RouteType    `protobuf:"varint,6,opt,name=route_type,json=routeType,proto3,enum=RouteType" json:"route_type,omitempty"`
	RouteUrl          *Url         `protobuf:"bytes,7,opt,name=route_url,json=routeUrl,proto3" json:"route_url,omitempty"`
	RouteColor        *Color       `protobuf:"bytes,8,opt,name=route_color,json=routeColor,proto3" json:"route_color,omitempty"`
	RouteTextColor    *Color       `protobuf:"bytes,9,opt,name=route_text_color,json=routeTextColor,proto3" json:"route_text_color,omitempty"`
	RouteSortOrder    int32        `protobuf:"varint,10,opt,name=route_sort_order,json=routeSortOrder,proto3" json:"route_sort_order,omitempty"`
	ContinuousPickup  PickupAccess `protobuf:"varint,11,opt,name=continuous_pickup,json=continuousPickup,proto3,enum=PickupAccess" json:"continuous_pickup,omitempty"`
	ContinuousDropOff PickupAccess `protobuf:"varint,12,opt,name=continuous_drop_off,json=continuousDropOff,proto3,enum=PickupAccess" json:"continuous_drop_off,omitempty"`
	NetworkId         string       `protobuf:"bytes,13,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{3}
}

func (x *Route) GetRouteId() *EntityID {
	if x != nil {
		return x.RouteId
	}
	return nil
}

func (x *Route) GetAgencyId() *Reference {
	if x != nil {
		return x.AgencyId
	}
	return nil
}

func (x *Route) GetRouteShortName() string {
	if x != nil {
		return x.RouteShortName
	}
	return ""
}

func (x *Route) GetRouteLongName() string {
	if x != nil {
		return x.RouteLongName
	}
	return ""
}

func (x *Route) GetRouteDesc() string {
	if x != nil {
		return x.RouteDesc
	}
	return ""
}

func (x *Route) GetRouteType() RouteType {
	if x != nil {
		return x.RouteType
	}
	return RouteType_VehicleTram
}

func (x *Route) GetRouteUrl() *Url {
	if x != nil {
		return x.RouteUrl
	}
	return nil
}

func (x *Route) GetRouteColor() *Color {
	if x != nil {
		return x.RouteColor
	}
	return nil
}

func (x *Route) GetRouteTextColor() *Color {
	if x != nil {
		return x.RouteTextColor
	}
	return nil
}

func (x *Route) GetRouteSortOrder() int32 {
	if x != nil {
		return x.RouteSortOrder
	}
	return 0
}

func (x *Route) GetContinuousPickup() PickupAccess {
	if x != nil {
		return x.ContinuousPickup
	}
	return PickupAccess_PickupContinuous
}

func (x *Route) GetContinuousDropOff() PickupAccess {
	if x != nil {
		return x.ContinuousDropOff
	}
	return PickupAccess_PickupContinuous
}

func (x *Route) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type Trip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId              *Reference       `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	ServiceId            *Reference       `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TripId               *EntityID        `protobuf:"bytes,3,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	TripHeadsign         string           `protobuf:"bytes,4,opt,name=trip_headsign,json=tripHeadsign,proto3" json:"trip_headsign,omitempty"`
	TripShortName        string           `protobuf:"bytes,5,opt,name=trip_short_name,json=tripShortName,proto3" json:"trip_short_name,omitempty"`
	DirectionId          TripDirection    `protobuf:"varint,6,opt,name=direction_id,json=directionId,proto3,enum=TripDirection" json:"direction_id,omitempty"`
	BlockId              string           `protobuf:"bytes,7,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	ShapeId              *Reference       `protobuf:"bytes,8,opt,name=shape_id,json=shapeId,proto3" json:"shape_id,omitempty"`
	WheelchairAccessible WheelchairAccess `protobuf:"varint,9,opt,name=wheelchair_accessible,json=wheelchairAccessible,proto3,enum=WheelchairAccess" json:"wheelchair_accessible,omitempty"`
	BikesAllowed         BikeAccess       `protobuf:"varint,10,opt,name=bikes_allowed,json=bikesAllowed,proto3,enum=BikeAccess" json:"bikes_allowed,omitempty"`
}

func (x *Trip) Reset() {
	*x = Trip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trip) ProtoMessage() {}

func (x *Trip) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trip.ProtoReflect.Descriptor instead.
func (*Trip) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{4}
}

func (x *Trip) GetRouteId() *Reference {
	if x != nil {
		return x.RouteId
	}
	return nil
}

func (x *Trip) GetServiceId() *Reference {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *Trip) GetTripId() *EntityID {
	if x != nil {
		return x.TripId
	}
	return nil
}

func (x *Trip) GetTripHeadsign() string {
	if x != nil {
		return x.TripHeadsign
	}
	return ""
}

func (x *Trip) GetTripShortName() string {
	if x != nil {
		return x.TripShortName
	}
	return ""
}

func (x *Trip) GetDirectionId() TripDirection {
	if x != nil {
		return x.DirectionId
	}
	return TripDirection_TripDirectionOutbound
}

func (x *Trip) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *Trip) GetShapeId() *Reference {
	if x != nil {
		return x.ShapeId
	}
	return nil
}

func (x *Trip) GetWheelchairAccessible() WheelchairAccess {
	if x != nil {
		return x.WheelchairAccessible
	}
	return WheelchairAccess_WheelchairUnknown
}

func (x *Trip) GetBikesAllowed() BikeAccess {
	if x != nil {
		return x.BikesAllowed
	}
	return BikeAccess_BikeUnknown
}

type StopTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripId                   *Reference    `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	ArrivalTime              *Seconds      `protobuf:"bytes,2,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	DepartureTime            *Seconds      `protobuf:"bytes,3,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	StopId                   *Reference    `protobuf:"bytes,4,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
	StopSequence             int32         `protobuf:"varint,5,opt,name=stop_sequence,json=stopSequence,proto3" json:"stop_sequence,omitempty"`
	StopHeadsign             string        `protobuf:"bytes,6,opt,name=stop_headsign,json=stopHeadsign,proto3" json:"stop_headsign,omitempty"`
	ContinuousPickup         PickupAccess  `protobuf:"varint,7,opt,name=continuous_pickup,json=continuousPickup,proto3,enum=PickupAccess" json:"continuous_pickup,omitempty"`
	ContinuousDropOff        PickupAccess  `protobuf:"varint,8,opt,name=continuous_drop_off,json=continuousDropOff,proto3,enum=PickupAccess" json:"continuous_drop_off,omitempty"`
	ShapeDistTraveled        float64       `protobuf:"fixed64,9,opt,name=shape_dist_traveled,json=shapeDistTraveled,proto3" json:"shape_dist_traveled,omitempty"`
	Timepoint                StopTimepoint `protobuf:"varint,10,opt,name=timepoint,proto3,enum=StopTimepoint" json:"timepoint,omitempty"`
	LocationId               *Reference    `protobuf:"bytes,11,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationGroupId          *Reference    `protobuf:"bytes,12,opt,name=location_group_id,json=locationGroupId,proto3" json:"location_group_id,omitempty"`
	StartPickupDropOffWindow *Seconds      `protobuf:"bytes,13,opt,name=start_pickup_drop_off_window,json=startPickupDropOffWindow,proto3" json:"start_pickup_drop_off_window,omitempty"`
	EndPickupDropOffWindow   *Seconds      `protobuf:"bytes,14,opt,name=end_pickup_drop_off_window,json=endPickupDropOffWindow,proto3" json:"end_pickup_drop_off_window,omitempty"`
	PickupType               PickupAccess  `protobuf:"varint,15,opt,name=pickup_type,json=pickupType,proto3,enum=PickupAccess" json:"pickup_type,omitempty"`
	DropOffType              PickupAccess  `protobuf:"varint,16,opt,name=drop_off_type,json=dropOffType,proto3,enum=PickupAccess" json:"drop_off_type,omitempty"`
	PickupBookingRuleId      *Reference    `protobuf:"bytes,17,opt,name=pickup_booking_rule_id,json=pickupBookingRuleId,proto3" json:"pickup_booking_rule_id,omitempty"`
	DropOffBookingRuleId     *Reference    `protobuf:"bytes,18,opt,name=drop_off_booking_rule_id,json=dropOffBookingRuleId,proto3" json:"drop_off_booking_rule_id,omitempty"`
}

func (x *StopTime) Reset() {
	*x = StopTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTime) ProtoMessage() {}

func (x *StopTime) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTime.ProtoReflect.Descriptor instead.
func (*StopTime) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{5}
}

func (x *StopTime) GetTripId() *Reference {
	if x != nil {
		return x.TripId
	}
	return nil
}

func (x *StopTime) GetArrivalTime() *Seconds {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *StopTime) GetDepartureTime() *Seconds {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *StopTime) GetStopId() *Reference {
	if x != nil {
		return x.StopId
	}
	return nil
}

func (x *StopTime) GetStopSequence() int32 {
	if x != nil {
		return x.StopSequence
	}
	return 0
}

func (x *StopTime) GetStopHeadsign() string {
	if x != nil {
		return x.StopHeadsign
	}
	return ""
}

func (x *StopTime) GetContinuousPickup() PickupAccess {
	if x != nil {
		return x.ContinuousPickup
	}
	return PickupAccess_PickupContinuous
}

func (x *StopTime) GetContinuousDropOff() PickupAccess {
	if x != nil {
		return x.ContinuousDropOff
	}
	return PickupAccess_PickupContinuous
}

func (x *StopTime) GetShapeDistTraveled() float64 {
	if x != nil {
		return x.ShapeDistTraveled
	}
	return 0
}

func (x *StopTime) GetTimepoint() StopTimepoint {
	if x != nil {
		return x.Timepoint
	}
	return StopTimepoint_Approximate
}

func (x *StopTime) GetLocationId() *Reference {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *StopTime) GetLocationGroupId() *Reference {
	if x != nil {
		return x.LocationGroupId
	}
	return nil
}

func (x *StopTime) GetStartPickupDropOffWindow() *Seconds {
	if x != nil {
		return x.StartPickupDropOffWindow
	}
	return nil
}

func (x *StopTime) GetEndPickupDropOffWindow() *Seconds {
	if x != nil {
		return x.EndPickupDropOffWindow
	}
	return nil
}

func (x *StopTime) GetPickupType() PickupAccess {
	if x != nil {
		return x.PickupType
	}
	return PickupAccess_PickupContinuous
}

func (x *StopTime) GetDropOffType() PickupAccess {
	if x != nil {
		return x.DropOffType
	}
	return PickupAccess_PickupContinuous
}

func (x *StopTime) GetPickupBookingRuleId() *Reference {
	if x != nil {
		return x.PickupBookingRuleId
	}
	return nil
}

func (x *StopTime) GetDropOffBookingRuleId() *Reference {
	if x != nil {
		return x.DropOffBookingRuleId
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *EntityID `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	StartDate *Date     `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *Date     `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Added     []*Date   `protobuf:"bytes,4,rep,name=added,proto3" json:"added,omitempty"`
	Removed   []*Date   `protobuf:"bytes,5,rep,name=removed,proto3" json:"removed,omitempty"`
	Monday    bool      `protobuf:"varint,6,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   bool      `protobuf:"varint,7,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday bool      `protobuf:"varint,8,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  bool      `protobuf:"varint,9,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    bool      `protobuf:"varint,10,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  bool      `protobuf:"varint,11,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    bool      `protobuf:"varint,12,opt,name=sunday,proto3" json:"sunday,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{6}
}

func (x *Service) GetServiceId() *EntityID {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *Service) GetStartDate() *Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Service) GetEndDate() *Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Service) GetAdded() []*Date {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *Service) GetRemoved() []*Date {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *Service) GetMonday() bool {
	if x != nil {
		return x.Monday
	}
	return false
}

func (x *Service) GetTuesday() bool {
	if x != nil {
		return x.Tuesday
	}
	return false
}

func (x *Service) GetWednesday() bool {
	if x != nil {
		return x.Wednesday
	}
	return false
}

func (x *Service) GetThursday() bool {
	if x != nil {
		return x.Thursday
	}
	return false
}

func (x *Service) GetFriday() bool {
	if x != nil {
		return x.Friday
	}
	return false
}

func (x *Service) GetSaturday() bool {
	if x != nil {
		return x.Saturday
	}
	return false
}

func (x *Service) GetSunday() bool {
	if x != nil {
		return x.Sunday
	}
	return false
}

type Calendar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId *EntityID `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	StartDate *Date     `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *Date     `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Monday    bool      `protobuf:"varint,4,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   bool      `protobuf:"varint,5,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday bool      `protobuf:"varint,6,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  bool      `protobuf:"varint,7,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    bool      `protobuf:"varint,8,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  bool      `protobuf:"varint,9,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    bool      `protobuf:"varint,10,opt,name=sunday,proto3" json:"sunday,omitempty"`
}

func (x *Calendar) Reset() {
	*x = Calendar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Calendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calendar) ProtoMessage() {}

func (x *Calendar) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calendar.ProtoReflect.Descriptor instead.
func (*Calendar) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{7}
}

func (x *Calendar) GetServiceId() *EntityID {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *Calendar) GetStartDate() *Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Calendar) GetEndDate() *Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Calendar) GetMonday() bool {
	if x != nil {
		return x.Monday
	}
	return false
}

func (x *Calendar) GetTuesday() bool {
	if x != nil {
		return x.Tuesday
	}
	return false
}

func (x *Calendar) GetWednesday() bool {
	if x != nil {
		return x.Wednesday
	}
	return false
}

func (x *Calendar) GetThursday() bool {
	if x != nil {
		return x.Thursday
	}
	return false
}

func (x *Calendar) GetFriday() bool {
	if x != nil {
		return x.Friday
	}
	return false
}

func (x *Calendar) GetSaturday() bool {
	if x != nil {
		return x.Saturday
	}
	return false
}

func (x *Calendar) GetSunday() bool {
	if x != nil {
		return x.Sunday
	}
	return false
}

type CalendarDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId     *Reference            `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Date          *Date                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	ExceptionType CalendarExceptionType `protobuf:"varint,3,opt,name=exception_type,json=exceptionType,proto3,enum=CalendarExceptionType" json:"exception_type,omitempty"`
}

func (x *CalendarDate) Reset() {
	*x = CalendarDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarDate) ProtoMessage() {}

func (x *CalendarDate) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarDate.ProtoReflect.Descriptor instead.
func (*CalendarDate) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{8}
}

func (x *CalendarDate) GetServiceId() *Reference {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

func (x *CalendarDate) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CalendarDate) GetExceptionType() CalendarExceptionType {
	if x != nil {
		return x.ExceptionType
	}
	return CalendarExceptionType_CalendarUnknown
}

type FareAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareId           *EntityID                 `protobuf:"bytes,1,opt,name=fare_id,json=fareId,proto3" json:"fare_id,omitempty"`
	Price            *Money                    `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	CurrencyType     *Currency                 `protobuf:"bytes,3,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	PaymentMethod    PaymentMethod             `protobuf:"varint,4,opt,name=payment_method,json=paymentMethod,proto3,enum=PaymentMethod" json:"payment_method,omitempty"`
	Transfers        FareAttributeTransferType `protobuf:"varint,5,opt,name=transfers,proto3,enum=FareAttributeTransferType" json:"transfers,omitempty"`
	AgencyId         *Reference                `protobuf:"bytes,6,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
	TransferDuration int32                     `protobuf:"varint,7,opt,name=transfer_duration,json=transferDuration,proto3" json:"transfer_duration,omitempty"`
}

func (x *FareAttribute) Reset() {
	*x = FareAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareAttribute) ProtoMessage() {}

func (x *FareAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareAttribute.ProtoReflect.Descriptor instead.
func (*FareAttribute) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{9}
}

func (x *FareAttribute) GetFareId() *EntityID {
	if x != nil {
		return x.FareId
	}
	return nil
}

func (x *FareAttribute) GetPrice() *Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *FareAttribute) GetCurrencyType() *Currency {
	if x != nil {
		return x.CurrencyType
	}
	return nil
}

func (x *FareAttribute) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_PaymentMethodOnboard
}

func (x *FareAttribute) GetTransfers() FareAttributeTransferType {
	if x != nil {
		return x.Transfers
	}
	return FareAttributeTransferType_FareAttributeTransferTypeDisallowed
}

func (x *FareAttribute) GetAgencyId() *Reference {
	if x != nil {
		return x.AgencyId
	}
	return nil
}

func (x *FareAttribute) GetTransferDuration() int32 {
	if x != nil {
		return x.TransferDuration
	}
	return 0
}

type FareRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareId        *EntityID  `protobuf:"bytes,1,opt,name=fare_id,json=fareId,proto3" json:"fare_id,omitempty"`
	RouteId       *Reference `protobuf:"bytes,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	OriginId      *Reference `protobuf:"bytes,3,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	DestinationId *Reference `protobuf:"bytes,4,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	ContainsId    *Reference `protobuf:"bytes,5,opt,name=contains_id,json=containsId,proto3" json:"contains_id,omitempty"`
}

func (x *FareRule) Reset() {
	*x = FareRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareRule) ProtoMessage() {}

func (x *FareRule) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareRule.ProtoReflect.Descriptor instead.
func (*FareRule) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{10}
}

func (x *FareRule) GetFareId() *EntityID {
	if x != nil {
		return x.FareId
	}
	return nil
}

func (x *FareRule) GetRouteId() *Reference {
	if x != nil {
		return x.RouteId
	}
	return nil
}

func (x *FareRule) GetOriginId() *Reference {
	if x != nil {
		return x.OriginId
	}
	return nil
}

func (x *FareRule) GetDestinationId() *Reference {
	if x != nil {
		return x.DestinationId
	}
	return nil
}

func (x *FareRule) GetContainsId() *Reference {
	if x != nil {
		return x.ContainsId
	}
	return nil
}

type Timeframe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeframeGroupId *EntityID  `protobuf:"bytes,1,opt,name=timeframe_group_id,json=timeframeGroupId,proto3" json:"timeframe_group_id,omitempty"`
	StartTime        *Seconds   `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          *Seconds   `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ServiceId        *Reference `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *Timeframe) Reset() {
	*x = Timeframe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeframe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeframe) ProtoMessage() {}

func (x *Timeframe) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeframe.ProtoReflect.Descriptor instead.
func (*Timeframe) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{11}
}

func (x *Timeframe) GetTimeframeGroupId() *EntityID {
	if x != nil {
		return x.TimeframeGroupId
	}
	return nil
}

func (x *Timeframe) GetStartTime() *Seconds {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Timeframe) GetEndTime() *Seconds {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Timeframe) GetServiceId() *Reference {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

type FareMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareMediaId   *EntityID     `protobuf:"bytes,1,opt,name=fare_media_id,json=fareMediaId,proto3" json:"fare_media_id,omitempty"`
	FareMediaName string        `protobuf:"bytes,2,opt,name=fare_media_name,json=fareMediaName,proto3" json:"fare_media_name,omitempty"`
	FareMediaType FareMediaType `protobuf:"varint,3,opt,name=fare_media_type,json=fareMediaType,proto3,enum=FareMediaType" json:"fare_media_type,omitempty"`
}

func (x *FareMedia) Reset() {
	*x = FareMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareMedia) ProtoMessage() {}

func (x *FareMedia) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareMedia.ProtoReflect.Descriptor instead.
func (*FareMedia) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{12}
}

func (x *FareMedia) GetFareMediaId() *EntityID {
	if x != nil {
		return x.FareMediaId
	}
	return nil
}

func (x *FareMedia) GetFareMediaName() string {
	if x != nil {
		return x.FareMediaName
	}
	return ""
}

func (x *FareMedia) GetFareMediaType() FareMediaType {
	if x != nil {
		return x.FareMediaType
	}
	return FareMediaType_FareMediaNone
}

type FareProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FareProductId   *EntityID  `protobuf:"bytes,1,opt,name=fare_product_id,json=fareProductId,proto3" json:"fare_product_id,omitempty"`
	FareProductName string     `protobuf:"bytes,2,opt,name=fare_product_name,json=fareProductName,proto3" json:"fare_product_name,omitempty"`
	FareMediaId     *Reference `protobuf:"bytes,3,opt,name=fare_media_id,json=fareMediaId,proto3" json:"fare_media_id,omitempty"`
	Amount          *Money     `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        *Currency  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *FareProduct) Reset() {
	*x = FareProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareProduct) ProtoMessage() {}

func (x *FareProduct) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareProduct.ProtoReflect.Descriptor instead.
func (*FareProduct) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{13}
}

func (x *FareProduct) GetFareProductId() *EntityID {
	if x != nil {
		return x.FareProductId
	}
	return nil
}

func (x *FareProduct) GetFareProductName() string {
	if x != nil {
		return x.FareProductName
	}
	return ""
}

func (x *FareProduct) GetFareMediaId() *Reference {
	if x != nil {
		return x.FareMediaId
	}
	return nil
}

func (x *FareProduct) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *FareProduct) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

type FareLegRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegGroupId           *EntityID  `protobuf:"bytes,1,opt,name=leg_group_id,json=legGroupId,proto3" json:"leg_group_id,omitempty"`
	NetworkId            *Reference `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	FromAreaId           *Reference `protobuf:"bytes,3,opt,name=from_area_id,json=fromAreaId,proto3" json:"from_area_id,omitempty"`
	ToAreaId             *Reference `protobuf:"bytes,4,opt,name=to_area_id,json=toAreaId,proto3" json:"to_area_id,omitempty"`
	FromTimeframeGroupId *Reference `protobuf:"bytes,5,opt,name=from_timeframe_group_id,json=fromTimeframeGroupId,proto3" json:"from_timeframe_group_id,omitempty"`
	ToTimeframeGroupId   *Reference `protobuf:"bytes,6,opt,name=to_timeframe_group_id,json=toTimeframeGroupId,proto3" json:"to_timeframe_group_id,omitempty"`
	FareProductId        *Reference `protobuf:"bytes,7,opt,name=fare_product_id,json=fareProductId,proto3" json:"fare_product_id,omitempty"`
	RuleProirity         int32      `protobuf:"varint,8,opt,name=rule_proirity,json=ruleProirity,proto3" json:"rule_proirity,omitempty"`
}

func (x *FareLegRule) Reset() {
	*x = FareLegRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareLegRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareLegRule) ProtoMessage() {}

func (x *FareLegRule) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareLegRule.ProtoReflect.Descriptor instead.
func (*FareLegRule) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{14}
}

func (x *FareLegRule) GetLegGroupId() *EntityID {
	if x != nil {
		return x.LegGroupId
	}
	return nil
}

func (x *FareLegRule) GetNetworkId() *Reference {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *FareLegRule) GetFromAreaId() *Reference {
	if x != nil {
		return x.FromAreaId
	}
	return nil
}

func (x *FareLegRule) GetToAreaId() *Reference {
	if x != nil {
		return x.ToAreaId
	}
	return nil
}

func (x *FareLegRule) GetFromTimeframeGroupId() *Reference {
	if x != nil {
		return x.FromTimeframeGroupId
	}
	return nil
}

func (x *FareLegRule) GetToTimeframeGroupId() *Reference {
	if x != nil {
		return x.ToTimeframeGroupId
	}
	return nil
}

func (x *FareLegRule) GetFareProductId() *Reference {
	if x != nil {
		return x.FareProductId
	}
	return nil
}

func (x *FareLegRule) GetRuleProirity() int32 {
	if x != nil {
		return x.RuleProirity
	}
	return 0
}

type FareTransferRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromLegGroupId    *Reference        `protobuf:"bytes,1,opt,name=from_leg_group_id,json=fromLegGroupId,proto3" json:"from_leg_group_id,omitempty"`
	ToLegGroupId      *Reference        `protobuf:"bytes,2,opt,name=to_leg_group_id,json=toLegGroupId,proto3" json:"to_leg_group_id,omitempty"`
	TransferCount     *TransferCount    `protobuf:"bytes,3,opt,name=transfer_count,json=transferCount,proto3" json:"transfer_count,omitempty"`
	DurationLimitType DurationLimitType `protobuf:"varint,4,opt,name=duration_limit_type,json=durationLimitType,proto3,enum=DurationLimitType" json:"duration_limit_type,omitempty"`
	FareTransferType  FareTransferType  `protobuf:"varint,5,opt,name=fare_transfer_type,json=fareTransferType,proto3,enum=FareTransferType" json:"fare_transfer_type,omitempty"`
	FareProductId     *Reference        `protobuf:"bytes,6,opt,name=fare_product_id,json=fareProductId,proto3" json:"fare_product_id,omitempty"`
}

func (x *FareTransferRule) Reset() {
	*x = FareTransferRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareTransferRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareTransferRule) ProtoMessage() {}

func (x *FareTransferRule) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareTransferRule.ProtoReflect.Descriptor instead.
func (*FareTransferRule) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{15}
}

func (x *FareTransferRule) GetFromLegGroupId() *Reference {
	if x != nil {
		return x.FromLegGroupId
	}
	return nil
}

func (x *FareTransferRule) GetToLegGroupId() *Reference {
	if x != nil {
		return x.ToLegGroupId
	}
	return nil
}

func (x *FareTransferRule) GetTransferCount() *TransferCount {
	if x != nil {
		return x.TransferCount
	}
	return nil
}

func (x *FareTransferRule) GetDurationLimitType() DurationLimitType {
	if x != nil {
		return x.DurationLimitType
	}
	return DurationLimitType_DurationLimit0
}

func (x *FareTransferRule) GetFareTransferType() FareTransferType {
	if x != nil {
		return x.FareTransferType
	}
	return FareTransferType_FareTransfer0
}

func (x *FareTransferRule) GetFareProductId() *Reference {
	if x != nil {
		return x.FareProductId
	}
	return nil
}

type Area struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId   *EntityID `protobuf:"bytes,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	AreaName string    `protobuf:"bytes,2,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`
}

func (x *Area) Reset() {
	*x = Area{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Area) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Area) ProtoMessage() {}

func (x *Area) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Area.ProtoReflect.Descriptor instead.
func (*Area) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{16}
}

func (x *Area) GetAreaId() *EntityID {
	if x != nil {
		return x.AreaId
	}
	return nil
}

func (x *Area) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

type StopArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId *Reference `protobuf:"bytes,1,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	StopId *Reference `protobuf:"bytes,2,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
}

func (x *StopArea) Reset() {
	*x = StopArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopArea) ProtoMessage() {}

func (x *StopArea) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopArea.ProtoReflect.Descriptor instead.
func (*StopArea) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{17}
}

func (x *StopArea) GetAreaId() *Reference {
	if x != nil {
		return x.AreaId
	}
	return nil
}

func (x *StopArea) GetStopId() *Reference {
	if x != nil {
		return x.StopId
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId   *EntityID `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	NetworkName string    `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{18}
}

func (x *Network) GetNetworkId() *EntityID {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *Network) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type RouteNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId *Reference `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	RouteId   *Reference `protobuf:"bytes,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *RouteNetwork) Reset() {
	*x = RouteNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteNetwork) ProtoMessage() {}

func (x *RouteNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteNetwork.ProtoReflect.Descriptor instead.
func (*RouteNetwork) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{19}
}

func (x *RouteNetwork) GetNetworkId() *Reference {
	if x != nil {
		return x.NetworkId
	}
	return nil
}

func (x *RouteNetwork) GetRouteId() *Reference {
	if x != nil {
		return x.RouteId
	}
	return nil
}

type Frequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripId      *Reference         `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	StartTime   *Seconds           `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *Seconds           `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	HeadwaySecs int32              `protobuf:"varint,4,opt,name=headway_secs,json=headwaySecs,proto3" json:"headway_secs,omitempty"`
	ExactTime   FrequencyExactTime `protobuf:"varint,5,opt,name=exact_time,json=exactTime,proto3,enum=FrequencyExactTime" json:"exact_time,omitempty"`
}

func (x *Frequency) Reset() {
	*x = Frequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frequency) ProtoMessage() {}

func (x *Frequency) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frequency.ProtoReflect.Descriptor instead.
func (*Frequency) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{20}
}

func (x *Frequency) GetTripId() *Reference {
	if x != nil {
		return x.TripId
	}
	return nil
}

func (x *Frequency) GetStartTime() *Seconds {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Frequency) GetEndTime() *Seconds {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Frequency) GetHeadwaySecs() int32 {
	if x != nil {
		return x.HeadwaySecs
	}
	return 0
}

func (x *Frequency) GetExactTime() FrequencyExactTime {
	if x != nil {
		return x.ExactTime
	}
	return FrequencyExactTime_FrequencyExactTimeFrequency
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromStopId      *Reference   `protobuf:"bytes,1,opt,name=from_stop_id,json=fromStopId,proto3" json:"from_stop_id,omitempty"`
	ToStopId        *Reference   `protobuf:"bytes,2,opt,name=to_stop_id,json=toStopId,proto3" json:"to_stop_id,omitempty"`
	FromRouteId     *Reference   `protobuf:"bytes,3,opt,name=from_route_id,json=fromRouteId,proto3" json:"from_route_id,omitempty"`
	ToRouteId       *Reference   `protobuf:"bytes,4,opt,name=to_route_id,json=toRouteId,proto3" json:"to_route_id,omitempty"`
	FromTripId      *Reference   `protobuf:"bytes,5,opt,name=from_trip_id,json=fromTripId,proto3" json:"from_trip_id,omitempty"`
	ToTripId        *Reference   `protobuf:"bytes,6,opt,name=to_trip_id,json=toTripId,proto3" json:"to_trip_id,omitempty"`
	TransferType    TransferType `protobuf:"varint,7,opt,name=transfer_type,json=transferType,proto3,enum=TransferType" json:"transfer_type,omitempty"`
	MinTransferTime int32        `protobuf:"varint,8,opt,name=min_transfer_time,json=minTransferTime,proto3" json:"min_transfer_time,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{21}
}

func (x *Transfer) GetFromStopId() *Reference {
	if x != nil {
		return x.FromStopId
	}
	return nil
}

func (x *Transfer) GetToStopId() *Reference {
	if x != nil {
		return x.ToStopId
	}
	return nil
}

func (x *Transfer) GetFromRouteId() *Reference {
	if x != nil {
		return x.FromRouteId
	}
	return nil
}

func (x *Transfer) GetToRouteId() *Reference {
	if x != nil {
		return x.ToRouteId
	}
	return nil
}

func (x *Transfer) GetFromTripId() *Reference {
	if x != nil {
		return x.FromTripId
	}
	return nil
}

func (x *Transfer) GetToTripId() *Reference {
	if x != nil {
		return x.ToTripId
	}
	return nil
}

func (x *Transfer) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TransferTypeRecommended
}

func (x *Transfer) GetMinTransferTime() int32 {
	if x != nil {
		return x.MinTransferTime
	}
	return 0
}

type Pathway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathwayId           *EntityID             `protobuf:"bytes,1,opt,name=pathway_id,json=pathwayId,proto3" json:"pathway_id,omitempty"`
	FromStopId          *Reference            `protobuf:"bytes,2,opt,name=from_stop_id,json=fromStopId,proto3" json:"from_stop_id,omitempty"`
	ToStopId            *Reference            `protobuf:"bytes,3,opt,name=to_stop_id,json=toStopId,proto3" json:"to_stop_id,omitempty"`
	PathwayMode         PathwayMode           `protobuf:"varint,4,opt,name=pathway_mode,json=pathwayMode,proto3,enum=PathwayMode" json:"pathway_mode,omitempty"`
	IsBidirectional     PathwayDirectionality `protobuf:"varint,5,opt,name=is_bidirectional,json=isBidirectional,proto3,enum=PathwayDirectionality" json:"is_bidirectional,omitempty"`
	Length              float64               `protobuf:"fixed64,6,opt,name=length,proto3" json:"length,omitempty"`
	TraversalTime       int32                 `protobuf:"varint,7,opt,name=traversal_time,json=traversalTime,proto3" json:"traversal_time,omitempty"`
	StairCount          int32                 `protobuf:"varint,8,opt,name=stair_count,json=stairCount,proto3" json:"stair_count,omitempty"`
	MaxSlope            float64               `protobuf:"fixed64,9,opt,name=max_slope,json=maxSlope,proto3" json:"max_slope,omitempty"`
	MinWidth            float64               `protobuf:"fixed64,10,opt,name=min_width,json=minWidth,proto3" json:"min_width,omitempty"`
	SignpostedAs        string                `protobuf:"bytes,11,opt,name=signposted_as,json=signpostedAs,proto3" json:"signposted_as,omitempty"`
	ReverseSignpostedAs string                `protobuf:"bytes,12,opt,name=reverse_signposted_as,json=reverseSignpostedAs,proto3" json:"reverse_signposted_as,omitempty"`
}

func (x *Pathway) Reset() {
	*x = Pathway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pathway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pathway) ProtoMessage() {}

func (x *Pathway) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pathway.ProtoReflect.Descriptor instead.
func (*Pathway) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{22}
}

func (x *Pathway) GetPathwayId() *EntityID {
	if x != nil {
		return x.PathwayId
	}
	return nil
}

func (x *Pathway) GetFromStopId() *Reference {
	if x != nil {
		return x.FromStopId
	}
	return nil
}

func (x *Pathway) GetToStopId() *Reference {
	if x != nil {
		return x.ToStopId
	}
	return nil
}

func (x *Pathway) GetPathwayMode() PathwayMode {
	if x != nil {
		return x.PathwayMode
	}
	return PathwayMode_PathwayModeUnknown
}

func (x *Pathway) GetIsBidirectional() PathwayDirectionality {
	if x != nil {
		return x.IsBidirectional
	}
	return PathwayDirectionality_PathwayUnidirectional
}

func (x *Pathway) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Pathway) GetTraversalTime() int32 {
	if x != nil {
		return x.TraversalTime
	}
	return 0
}

func (x *Pathway) GetStairCount() int32 {
	if x != nil {
		return x.StairCount
	}
	return 0
}

func (x *Pathway) GetMaxSlope() float64 {
	if x != nil {
		return x.MaxSlope
	}
	return 0
}

func (x *Pathway) GetMinWidth() float64 {
	if x != nil {
		return x.MinWidth
	}
	return 0
}

func (x *Pathway) GetSignpostedAs() string {
	if x != nil {
		return x.SignpostedAs
	}
	return ""
}

func (x *Pathway) GetReverseSignpostedAs() string {
	if x != nil {
		return x.ReverseSignpostedAs
	}
	return ""
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelId    *EntityID `protobuf:"bytes,1,opt,name=level_id,json=levelId,proto3" json:"level_id,omitempty"`
	LevelIndex float64   `protobuf:"fixed64,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	LevelName  string    `protobuf:"bytes,3,opt,name=level_name,json=levelName,proto3" json:"level_name,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{23}
}

func (x *Level) GetLevelId() *EntityID {
	if x != nil {
		return x.LevelId
	}
	return nil
}

func (x *Level) GetLevelIndex() float64 {
	if x != nil {
		return x.LevelIndex
	}
	return 0
}

func (x *Level) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

type LocationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationGroupId   *EntityID `protobuf:"bytes,1,opt,name=location_group_id,json=locationGroupId,proto3" json:"location_group_id,omitempty"`
	LocationGroupName string    `protobuf:"bytes,2,opt,name=location_group_name,json=locationGroupName,proto3" json:"location_group_name,omitempty"`
}

func (x *LocationGroup) Reset() {
	*x = LocationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationGroup) ProtoMessage() {}

func (x *LocationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationGroup.ProtoReflect.Descriptor instead.
func (*LocationGroup) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{24}
}

func (x *LocationGroup) GetLocationGroupId() *EntityID {
	if x != nil {
		return x.LocationGroupId
	}
	return nil
}

func (x *LocationGroup) GetLocationGroupName() string {
	if x != nil {
		return x.LocationGroupName
	}
	return ""
}

type LocationGroupStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationGroupId *Reference `protobuf:"bytes,1,opt,name=location_group_id,json=locationGroupId,proto3" json:"location_group_id,omitempty"`
	StopId          *Reference `protobuf:"bytes,2,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
}

func (x *LocationGroupStop) Reset() {
	*x = LocationGroupStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationGroupStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationGroupStop) ProtoMessage() {}

func (x *LocationGroupStop) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationGroupStop.ProtoReflect.Descriptor instead.
func (*LocationGroupStop) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{25}
}

func (x *LocationGroupStop) GetLocationGroupId() *Reference {
	if x != nil {
		return x.LocationGroupId
	}
	return nil
}

func (x *LocationGroupStop) GetStopId() *Reference {
	if x != nil {
		return x.StopId
	}
	return nil
}

type BookingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingRuleId          *EntityID       `protobuf:"bytes,1,opt,name=booking_rule_id,json=bookingRuleId,proto3" json:"booking_rule_id,omitempty"`
	BookingType            BookingRuleType `protobuf:"varint,2,opt,name=booking_type,json=bookingType,proto3,enum=BookingRuleType" json:"booking_type,omitempty"`
	PriorNoticeDurationMin int32           `protobuf:"varint,3,opt,name=prior_notice_duration_min,json=priorNoticeDurationMin,proto3" json:"prior_notice_duration_min,omitempty"`
	PriorNoticeDurationMax int32           `protobuf:"varint,4,opt,name=prior_notice_duration_max,json=priorNoticeDurationMax,proto3" json:"prior_notice_duration_max,omitempty"`
	PriorNoticeLastDay     int32           `protobuf:"varint,5,opt,name=prior_notice_last_day,json=priorNoticeLastDay,proto3" json:"prior_notice_last_day,omitempty"`
	PriorNoticeLastTime    *Seconds        `protobuf:"bytes,6,opt,name=prior_notice_last_time,json=priorNoticeLastTime,proto3" json:"prior_notice_last_time,omitempty"`
	PriorNoticeStartDay    int32           `protobuf:"varint,7,opt,name=prior_notice_start_day,json=priorNoticeStartDay,proto3" json:"prior_notice_start_day,omitempty"`
	PriorNoticeStartTime   *Seconds        `protobuf:"bytes,8,opt,name=prior_notice_start_time,json=priorNoticeStartTime,proto3" json:"prior_notice_start_time,omitempty"`
	PriorNoticeServiceId   *Reference      `protobuf:"bytes,9,opt,name=prior_notice_service_id,json=priorNoticeServiceId,proto3" json:"prior_notice_service_id,omitempty"`
	Message                string          `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	PickupMessage          string          `protobuf:"bytes,11,opt,name=pickup_message,json=pickupMessage,proto3" json:"pickup_message,omitempty"`
	DropOffMessage         string          `protobuf:"bytes,12,opt,name=drop_off_message,json=dropOffMessage,proto3" json:"drop_off_message,omitempty"`
	PhoneNumber            string          `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	InfoUrl                *Url            `protobuf:"bytes,14,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	BookingUrl             *Url            `protobuf:"bytes,15,opt,name=booking_url,json=bookingUrl,proto3" json:"booking_url,omitempty"`
}

func (x *BookingRule) Reset() {
	*x = BookingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingRule) ProtoMessage() {}

func (x *BookingRule) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingRule.ProtoReflect.Descriptor instead.
func (*BookingRule) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{26}
}

func (x *BookingRule) GetBookingRuleId() *EntityID {
	if x != nil {
		return x.BookingRuleId
	}
	return nil
}

func (x *BookingRule) GetBookingType() BookingRuleType {
	if x != nil {
		return x.BookingType
	}
	return BookingRuleType_BookingRuleTypeRealtime
}

func (x *BookingRule) GetPriorNoticeDurationMin() int32 {
	if x != nil {
		return x.PriorNoticeDurationMin
	}
	return 0
}

func (x *BookingRule) GetPriorNoticeDurationMax() int32 {
	if x != nil {
		return x.PriorNoticeDurationMax
	}
	return 0
}

func (x *BookingRule) GetPriorNoticeLastDay() int32 {
	if x != nil {
		return x.PriorNoticeLastDay
	}
	return 0
}

func (x *BookingRule) GetPriorNoticeLastTime() *Seconds {
	if x != nil {
		return x.PriorNoticeLastTime
	}
	return nil
}

func (x *BookingRule) GetPriorNoticeStartDay() int32 {
	if x != nil {
		return x.PriorNoticeStartDay
	}
	return 0
}

func (x *BookingRule) GetPriorNoticeStartTime() *Seconds {
	if x != nil {
		return x.PriorNoticeStartTime
	}
	return nil
}

func (x *BookingRule) GetPriorNoticeServiceId() *Reference {
	if x != nil {
		return x.PriorNoticeServiceId
	}
	return nil
}

func (x *BookingRule) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BookingRule) GetPickupMessage() string {
	if x != nil {
		return x.PickupMessage
	}
	return ""
}

func (x *BookingRule) GetDropOffMessage() string {
	if x != nil {
		return x.DropOffMessage
	}
	return ""
}

func (x *BookingRule) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BookingRule) GetInfoUrl() *Url {
	if x != nil {
		return x.InfoUrl
	}
	return nil
}

func (x *BookingRule) GetBookingUrl() *Url {
	if x != nil {
		return x.BookingUrl
	}
	return nil
}

type Translation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName   string    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"` // a string enum, not supported in protobuf
	FieldName   string    `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Language    *Language `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Translation string    `protobuf:"bytes,4,opt,name=translation,proto3" json:"translation,omitempty"`
	RecordId    string    `protobuf:"bytes,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"` // technically a reference, but must be resolved manually
	RecordSubId string    `protobuf:"bytes,6,opt,name=record_sub_id,json=recordSubId,proto3" json:"record_sub_id,omitempty"`
	FieldValue  string    `protobuf:"bytes,7,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (x *Translation) Reset() {
	*x = Translation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation) ProtoMessage() {}

func (x *Translation) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation.ProtoReflect.Descriptor instead.
func (*Translation) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{27}
}

func (x *Translation) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Translation) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Translation) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Translation) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *Translation) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *Translation) GetRecordSubId() string {
	if x != nil {
		return x.RecordSubId
	}
	return ""
}

func (x *Translation) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

type FeedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedPublisherName string    `protobuf:"bytes,1,opt,name=feed_publisher_name,json=feedPublisherName,proto3" json:"feed_publisher_name,omitempty"`
	FeedPublisherUrl  *Url      `protobuf:"bytes,2,opt,name=feed_publisher_url,json=feedPublisherUrl,proto3" json:"feed_publisher_url,omitempty"`
	FeedLang          *Language `protobuf:"bytes,3,opt,name=feed_lang,json=feedLang,proto3" json:"feed_lang,omitempty"`
	DefaultLang       *Language `protobuf:"bytes,4,opt,name=default_lang,json=defaultLang,proto3" json:"default_lang,omitempty"`
	FeedStartDate     *Date     `protobuf:"bytes,5,opt,name=feed_start_date,json=feedStartDate,proto3" json:"feed_start_date,omitempty"`
	FeedEndDate       *Date     `protobuf:"bytes,6,opt,name=feed_end_date,json=feedEndDate,proto3" json:"feed_end_date,omitempty"`
	FeedContactEmail  *Email    `protobuf:"bytes,7,opt,name=feed_contact_email,json=feedContactEmail,proto3" json:"feed_contact_email,omitempty"`
	FeedContactUrl    *Url      `protobuf:"bytes,8,opt,name=feed_contact_url,json=feedContactUrl,proto3" json:"feed_contact_url,omitempty"`
}

func (x *FeedInfo) Reset() {
	*x = FeedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedInfo) ProtoMessage() {}

func (x *FeedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedInfo.ProtoReflect.Descriptor instead.
func (*FeedInfo) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{28}
}

func (x *FeedInfo) GetFeedPublisherName() string {
	if x != nil {
		return x.FeedPublisherName
	}
	return ""
}

func (x *FeedInfo) GetFeedPublisherUrl() *Url {
	if x != nil {
		return x.FeedPublisherUrl
	}
	return nil
}

func (x *FeedInfo) GetFeedLang() *Language {
	if x != nil {
		return x.FeedLang
	}
	return nil
}

func (x *FeedInfo) GetDefaultLang() *Language {
	if x != nil {
		return x.DefaultLang
	}
	return nil
}

func (x *FeedInfo) GetFeedStartDate() *Date {
	if x != nil {
		return x.FeedStartDate
	}
	return nil
}

func (x *FeedInfo) GetFeedEndDate() *Date {
	if x != nil {
		return x.FeedEndDate
	}
	return nil
}

func (x *FeedInfo) GetFeedContactEmail() *Email {
	if x != nil {
		return x.FeedContactEmail
	}
	return nil
}

func (x *FeedInfo) GetFeedContactUrl() *Url {
	if x != nil {
		return x.FeedContactUrl
	}
	return nil
}

type Attribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Attribution) Reset() {
	*x = Attribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribution) ProtoMessage() {}

func (x *Attribution) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribution.ProtoReflect.Descriptor instead.
func (*Attribution) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{29}
}

type ShapePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapeId           *EntityID `protobuf:"bytes,1,opt,name=shape_id,json=shapeId,proto3" json:"shape_id,omitempty"`
	ShapePtLat        float64   `protobuf:"fixed64,2,opt,name=shape_pt_lat,json=shapePtLat,proto3" json:"shape_pt_lat,omitempty"`
	ShapePtLon        float64   `protobuf:"fixed64,3,opt,name=shape_pt_lon,json=shapePtLon,proto3" json:"shape_pt_lon,omitempty"`
	ShapePtSequence   int32     `protobuf:"varint,4,opt,name=shape_pt_sequence,json=shapePtSequence,proto3" json:"shape_pt_sequence,omitempty"`
	ShapeDistTraveled float64   `protobuf:"fixed64,5,opt,name=shape_dist_traveled,json=shapeDistTraveled,proto3" json:"shape_dist_traveled,omitempty"`
}

func (x *ShapePoint) Reset() {
	*x = ShapePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapePoint) ProtoMessage() {}

func (x *ShapePoint) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapePoint.ProtoReflect.Descriptor instead.
func (*ShapePoint) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{30}
}

func (x *ShapePoint) GetShapeId() *EntityID {
	if x != nil {
		return x.ShapeId
	}
	return nil
}

func (x *ShapePoint) GetShapePtLat() float64 {
	if x != nil {
		return x.ShapePtLat
	}
	return 0
}

func (x *ShapePoint) GetShapePtLon() float64 {
	if x != nil {
		return x.ShapePtLon
	}
	return 0
}

func (x *ShapePoint) GetShapePtSequence() int32 {
	if x != nil {
		return x.ShapePtSequence
	}
	return 0
}

func (x *ShapePoint) GetShapeDistTraveled() float64 {
	if x != nil {
		return x.ShapeDistTraveled
	}
	return 0
}

type Shape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapeId *EntityID   `protobuf:"bytes,1,opt,name=shape_id,json=shapeId,proto3" json:"shape_id,omitempty"`
	Shape   *LineString `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
}

func (x *Shape) Reset() {
	*x = Shape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shape) ProtoMessage() {}

func (x *Shape) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shape.ProtoReflect.Descriptor instead.
func (*Shape) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{31}
}

func (x *Shape) GetShapeId() *EntityID {
	if x != nil {
		return x.ShapeId
	}
	return nil
}

func (x *Shape) GetShape() *LineString {
	if x != nil {
		return x.Shape
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lon float64 `protobuf:"fixed64,1,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{32}
}

func (x *Point) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Point) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type LineString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stride      uint32    `protobuf:"varint,1,opt,name=stride,proto3" json:"stride,omitempty"`
	Coordinates []float64 `protobuf:"fixed64,2,rep,packed,name=coordinates,proto3" json:"coordinates,omitempty"`
}

func (x *LineString) Reset() {
	*x = LineString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineString) ProtoMessage() {}

func (x *LineString) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineString.ProtoReflect.Descriptor instead.
func (*LineString) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{33}
}

func (x *LineString) GetStride() uint32 {
	if x != nil {
		return x.Stride
	}
	return 0
}

func (x *LineString) GetCoordinates() []float64 {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{34}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val int64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{35}
}

func (x *Time) GetVal() int64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type Seconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val int64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Seconds) Reset() {
	*x = Seconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seconds) ProtoMessage() {}

func (x *Seconds) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seconds.ProtoReflect.Descriptor instead.
func (*Seconds) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{36}
}

func (x *Seconds) GetVal() int64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type EntityID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *EntityID) Reset() {
	*x = EntityID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityID) ProtoMessage() {}

func (x *EntityID) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityID.ProtoReflect.Descriptor instead.
func (*EntityID) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{37}
}

func (x *EntityID) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Timezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Timezone) Reset() {
	*x = Timezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timezone) ProtoMessage() {}

func (x *Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timezone.ProtoReflect.Descriptor instead.
func (*Timezone) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{38}
}

func (x *Timezone) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{39}
}

func (x *Reference) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{40}
}

func (x *Url) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{41}
}

func (x *Email) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{42}
}

func (x *Color) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val float64 `protobuf:"fixed64,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{43}
}

func (x *Money) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{44}
}

func (x *Currency) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Language) Reset() {
	*x = Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{45}
}

func (x *Language) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

// This must be a message so we can check for nil
// "0" and "" have different semantics in GTFS
type FareAttributeTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferType FareAttributeTransferType `protobuf:"varint,1,opt,name=transfer_type,json=transferType,proto3,enum=FareAttributeTransferType" json:"transfer_type,omitempty"`
}

func (x *FareAttributeTransfer) Reset() {
	*x = FareAttributeTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FareAttributeTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FareAttributeTransfer) ProtoMessage() {}

func (x *FareAttributeTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FareAttributeTransfer.ProtoReflect.Descriptor instead.
func (*FareAttributeTransfer) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{46}
}

func (x *FareAttributeTransfer) GetTransferType() FareAttributeTransferType {
	if x != nil {
		return x.TransferType
	}
	return FareAttributeTransferType_FareAttributeTransferTypeDisallowed
}

// "0" and "" have different semantics
type TransferCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferCount int32 `protobuf:"varint,1,opt,name=transfer_count,json=transferCount,proto3" json:"transfer_count,omitempty"`
}

func (x *TransferCount) Reset() {
	*x = TransferCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfs_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCount) ProtoMessage() {}

func (x *TransferCount) ProtoReflect() protoreflect.Message {
	mi := &file_gtfs_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCount.ProtoReflect.Descriptor instead.
func (*TransferCount) Descriptor() ([]byte, []int) {
	return file_gtfs_proto_rawDescGZIP(), []int{47}
}

func (x *TransferCount) GetTransferCount() int32 {
	if x != nil {
		return x.TransferCount
	}
	return 0
}

var File_gtfs_proto protoreflect.FileDescriptor

var file_gtfs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x74, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a,
	0x0a, 0x46, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70,
	0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x06, 0x41,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x61, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x61, 0x72,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0xc0, 0x04, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x74, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x4c,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x12, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xb4, 0x04, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x29, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x04, 0x54, 0x72,
	0x69, 0x70, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x70, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x54, 0x72,
	0x69, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x15, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x14, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x62, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x42, 0x69, 0x6b, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x62, 0x69, 0x6b, 0x65, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x22, 0xb2, 0x07, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x48, 0x65, 0x61, 0x64, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x3a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x3d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50,
	0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x72,
	0x6f, 0x70, 0x4f, 0x66, 0x66, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x44, 0x0a, 0x1a, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f,
	0x66, 0x66, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x16, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x13, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e,
	0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74,
	0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x74,
	0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x22, 0xb4, 0x02,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f,
	0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75,
	0x6e, 0x64, 0x61, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x0d, 0x46,
	0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x07,
	0x66, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x06, 0x66, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x27, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x72, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x06,
	0x66, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x10, 0x74, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x46, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x2d, 0x0a, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x66,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0f, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x98, 0x03, 0x0a, 0x0b, 0x46, 0x61,
	0x72, 0x65, 0x4c, 0x65, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x6c, 0x65, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x74, 0x6f, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x17, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x15,
	0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0f, 0x66,
	0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x69, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x69,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x46, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6c, 0x65, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x65, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x6c, 0x65, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x4c, 0x65, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x13, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x12, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x46, 0x61, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x66,
	0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x0f, 0x66, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x66, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x08,
	0x53, 0x74, 0x6f, 0x70, 0x41, 0x72, 0x65, 0x61, 0x12, 0x23, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a,
	0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x64, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x77, 0x61, 0x79, 0x53, 0x65, 0x63, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x6f, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x72,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x03,
	0x0a, 0x07, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x74, 0x68, 0x77, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x69, 0x73, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x41, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x41, 0x73, 0x22, 0x6d, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x08, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x76, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x35, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x11, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x36,
	0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0xec, 0x05, 0x0a, 0x0b,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x52,
	0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x16,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79,
	0x12, 0x3f, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x65, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55,
	0x72, 0x6c, 0x52, 0x10, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0f, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x65, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x12, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x10, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x70, 0x65, 0x50, 0x74, 0x4c, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x74, 0x5f, 0x6c, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x70, 0x65, 0x50, 0x74, 0x4c,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x74, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x50, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x22, 0x50,
	0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x52, 0x07, 0x73, 0x68, 0x61, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x22, 0x46, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x18, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0x1b, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x22, 0x1c, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x1c,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x1d, 0x0a, 0x09,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x17, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x22, 0x19, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x19, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x19, 0x0a, 0x05, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x1c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0x1c, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x22, 0x58, 0x0a, 0x15, 0x46, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x2a, 0x5a, 0x0a, 0x10, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x02, 0x2a,
	0x42, 0x0a, 0x0a, 0x42, 0x69, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x69, 0x6b, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x69, 0x6b, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x69, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x2a, 0x64, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x75, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x73, 0x6b, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x65, 0x61, 0x10, 0x04, 0x2a, 0xcc, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x75, 0x73, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x65, 0x72, 0x72, 0x79, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x72, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x47, 0x6f, 0x6e, 0x64,
	0x6f, 0x6c, 0x61, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x62, 0x75, 0x73, 0x10,
	0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x2a, 0x44, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x70, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x70, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x12,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x61, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x78, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x10, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x53, 0x65, 0x61, 0x74, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x78, 0x69, 0x74, 0x10, 0x05,
	0x2a, 0x4c, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x61, 0x74,
	0x68, 0x77, 0x61, 0x79, 0x55, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x42,
	0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x2a, 0xd5,
	0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x77, 0x61, 0x79, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x69, 0x72, 0x73, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x61,
	0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
	0x72, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x46, 0x61, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x61, 0x74, 0x68, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x10, 0x07, 0x2a, 0x67, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x64, 0x61, 0x79, 0x10, 0x02, 0x2a,
	0x72, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x61, 0x70, 0x65, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x70,
	0x70, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x10, 0x46, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x30, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x31, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x32, 0x10, 0x02,
	0x2a, 0x63, 0x0a, 0x11, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x30, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x31, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x33, 0x10, 0x03, 0x2a, 0x8b, 0x01, 0x0a, 0x19, 0x46, 0x61, 0x72, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x46, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x77, 0x69, 0x63,
	0x65, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f,
	0x66, 0x66, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gtfs_proto_rawDescOnce sync.Once
	file_gtfs_proto_rawDescData = file_gtfs_proto_rawDesc
)

func file_gtfs_proto_rawDescGZIP() []byte {
	file_gtfs_proto_rawDescOnce.Do(func() {
		file_gtfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_gtfs_proto_rawDescData)
	})
	return file_gtfs_proto_rawDescData
}

var file_gtfs_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_gtfs_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_gtfs_proto_goTypes = []any{
	(WheelchairAccess)(0),          // 0: WheelchairAccess
	(BikeAccess)(0),                // 1: BikeAccess
	(BoardAccess)(0),               // 2: BoardAccess
	(PickupAccess)(0),              // 3: PickupAccess
	(StopLocationType)(0),          // 4: StopLocationType
	(RouteType)(0),                 // 5: RouteType
	(TripDirection)(0),             // 6: TripDirection
	(StopTimepoint)(0),             // 7: StopTimepoint
	(CalendarExceptionType)(0),     // 8: CalendarExceptionType
	(FrequencyExactTime)(0),        // 9: FrequencyExactTime
	(TransferType)(0),              // 10: TransferType
	(PathwayDirectionality)(0),     // 11: PathwayDirectionality
	(PathwayMode)(0),               // 12: PathwayMode
	(BookingRuleType)(0),           // 13: BookingRuleType
	(FareMediaType)(0),             // 14: FareMediaType
	(FareTransferType)(0),          // 15: FareTransferType
	(DurationLimitType)(0),         // 16: DurationLimitType
	(FareAttributeTransferType)(0), // 17: FareAttributeTransferType
	(PaymentMethod)(0),             // 18: PaymentMethod
	(*FeedEntity)(nil),             // 19: FeedEntity
	(*Agency)(nil),                 // 20: Agency
	(*Stop)(nil),                   // 21: Stop
	(*Route)(nil),                  // 22: Route
	(*Trip)(nil),                   // 23: Trip
	(*StopTime)(nil),               // 24: StopTime
	(*Service)(nil),                // 25: Service
	(*Calendar)(nil),               // 26: Calendar
	(*CalendarDate)(nil),           // 27: CalendarDate
	(*FareAttribute)(nil),          // 28: FareAttribute
	(*FareRule)(nil),               // 29: FareRule
	(*Timeframe)(nil),              // 30: Timeframe
	(*FareMedia)(nil),              // 31: FareMedia
	(*FareProduct)(nil),            // 32: FareProduct
	(*FareLegRule)(nil),            // 33: FareLegRule
	(*FareTransferRule)(nil),       // 34: FareTransferRule
	(*Area)(nil),                   // 35: Area
	(*StopArea)(nil),               // 36: StopArea
	(*Network)(nil),                // 37: Network
	(*RouteNetwork)(nil),           // 38: RouteNetwork
	(*Frequency)(nil),              // 39: Frequency
	(*Transfer)(nil),               // 40: Transfer
	(*Pathway)(nil),                // 41: Pathway
	(*Level)(nil),                  // 42: Level
	(*LocationGroup)(nil),          // 43: LocationGroup
	(*LocationGroupStop)(nil),      // 44: LocationGroupStop
	(*BookingRule)(nil),            // 45: BookingRule
	(*Translation)(nil),            // 46: Translation
	(*FeedInfo)(nil),               // 47: FeedInfo
	(*Attribution)(nil),            // 48: Attribution
	(*ShapePoint)(nil),             // 49: ShapePoint
	(*Shape)(nil),                  // 50: Shape
	(*Point)(nil),                  // 51: Point
	(*LineString)(nil),             // 52: LineString
	(*Date)(nil),                   // 53: Date
	(*Time)(nil),                   // 54: Time
	(*Seconds)(nil),                // 55: Seconds
	(*EntityID)(nil),               // 56: EntityID
	(*Timezone)(nil),               // 57: Timezone
	(*Reference)(nil),              // 58: Reference
	(*Url)(nil),                    // 59: Url
	(*Email)(nil),                  // 60: Email
	(*Color)(nil),                  // 61: Color
	(*Money)(nil),                  // 62: Money
	(*Currency)(nil),               // 63: Currency
	(*Language)(nil),               // 64: Language
	(*FareAttributeTransfer)(nil),  // 65: FareAttributeTransfer
	(*TransferCount)(nil),          // 66: TransferCount
}
var file_gtfs_proto_depIdxs = []int32{
	20,  // 0: FeedEntity.agency:type_name -> Agency
	21,  // 1: FeedEntity.stop:type_name -> Stop
	22,  // 2: FeedEntity.route:type_name -> Route
	23,  // 3: FeedEntity.trip:type_name -> Trip
	24,  // 4: FeedEntity.stop_time:type_name -> StopTime
	50,  // 5: FeedEntity.shape:type_name -> Shape
	25,  // 6: FeedEntity.service:type_name -> Service
	56,  // 7: Agency.agency_id:type_name -> EntityID
	59,  // 8: Agency.agency_url:type_name -> Url
	57,  // 9: Agency.agency_timezone:type_name -> Timezone
	64,  // 10: Agency.agency_lang:type_name -> Language
	59,  // 11: Agency.agency_fare_url:type_name -> Url
	60,  // 12: Agency.agency_email:type_name -> Email
	56,  // 13: Stop.stop_id:type_name -> EntityID
	59,  // 14: Stop.stop_url:type_name -> Url
	4,   // 15: Stop.location_type:type_name -> StopLocationType
	58,  // 16: Stop.parent_station:type_name -> Reference
	57,  // 17: Stop.stop_timezone:type_name -> Timezone
	0,   // 18: Stop.wheelchair_boarding:type_name -> WheelchairAccess
	58,  // 19: Stop.level_id:type_name -> Reference
	56,  // 20: Route.route_id:type_name -> EntityID
	58,  // 21: Route.agency_id:type_name -> Reference
	5,   // 22: Route.route_type:type_name -> RouteType
	59,  // 23: Route.route_url:type_name -> Url
	61,  // 24: Route.route_color:type_name -> Color
	61,  // 25: Route.route_text_color:type_name -> Color
	3,   // 26: Route.continuous_pickup:type_name -> PickupAccess
	3,   // 27: Route.continuous_drop_off:type_name -> PickupAccess
	58,  // 28: Trip.route_id:type_name -> Reference
	58,  // 29: Trip.service_id:type_name -> Reference
	56,  // 30: Trip.trip_id:type_name -> EntityID
	6,   // 31: Trip.direction_id:type_name -> TripDirection
	58,  // 32: Trip.shape_id:type_name -> Reference
	0,   // 33: Trip.wheelchair_accessible:type_name -> WheelchairAccess
	1,   // 34: Trip.bikes_allowed:type_name -> BikeAccess
	58,  // 35: StopTime.trip_id:type_name -> Reference
	55,  // 36: StopTime.arrival_time:type_name -> Seconds
	55,  // 37: StopTime.departure_time:type_name -> Seconds
	58,  // 38: StopTime.stop_id:type_name -> Reference
	3,   // 39: StopTime.continuous_pickup:type_name -> PickupAccess
	3,   // 40: StopTime.continuous_drop_off:type_name -> PickupAccess
	7,   // 41: StopTime.timepoint:type_name -> StopTimepoint
	58,  // 42: StopTime.location_id:type_name -> Reference
	58,  // 43: StopTime.location_group_id:type_name -> Reference
	55,  // 44: StopTime.start_pickup_drop_off_window:type_name -> Seconds
	55,  // 45: StopTime.end_pickup_drop_off_window:type_name -> Seconds
	3,   // 46: StopTime.pickup_type:type_name -> PickupAccess
	3,   // 47: StopTime.drop_off_type:type_name -> PickupAccess
	58,  // 48: StopTime.pickup_booking_rule_id:type_name -> Reference
	58,  // 49: StopTime.drop_off_booking_rule_id:type_name -> Reference
	56,  // 50: Service.service_id:type_name -> EntityID
	53,  // 51: Service.start_date:type_name -> Date
	53,  // 52: Service.end_date:type_name -> Date
	53,  // 53: Service.added:type_name -> Date
	53,  // 54: Service.removed:type_name -> Date
	56,  // 55: Calendar.service_id:type_name -> EntityID
	53,  // 56: Calendar.start_date:type_name -> Date
	53,  // 57: Calendar.end_date:type_name -> Date
	58,  // 58: CalendarDate.service_id:type_name -> Reference
	53,  // 59: CalendarDate.date:type_name -> Date
	8,   // 60: CalendarDate.exception_type:type_name -> CalendarExceptionType
	56,  // 61: FareAttribute.fare_id:type_name -> EntityID
	62,  // 62: FareAttribute.price:type_name -> Money
	63,  // 63: FareAttribute.currency_type:type_name -> Currency
	18,  // 64: FareAttribute.payment_method:type_name -> PaymentMethod
	17,  // 65: FareAttribute.transfers:type_name -> FareAttributeTransferType
	58,  // 66: FareAttribute.agency_id:type_name -> Reference
	56,  // 67: FareRule.fare_id:type_name -> EntityID
	58,  // 68: FareRule.route_id:type_name -> Reference
	58,  // 69: FareRule.origin_id:type_name -> Reference
	58,  // 70: FareRule.destination_id:type_name -> Reference
	58,  // 71: FareRule.contains_id:type_name -> Reference
	56,  // 72: Timeframe.timeframe_group_id:type_name -> EntityID
	55,  // 73: Timeframe.start_time:type_name -> Seconds
	55,  // 74: Timeframe.end_time:type_name -> Seconds
	58,  // 75: Timeframe.service_id:type_name -> Reference
	56,  // 76: FareMedia.fare_media_id:type_name -> EntityID
	14,  // 77: FareMedia.fare_media_type:type_name -> FareMediaType
	56,  // 78: FareProduct.fare_product_id:type_name -> EntityID
	58,  // 79: FareProduct.fare_media_id:type_name -> Reference
	62,  // 80: FareProduct.amount:type_name -> Money
	63,  // 81: FareProduct.currency:type_name -> Currency
	56,  // 82: FareLegRule.leg_group_id:type_name -> EntityID
	58,  // 83: FareLegRule.network_id:type_name -> Reference
	58,  // 84: FareLegRule.from_area_id:type_name -> Reference
	58,  // 85: FareLegRule.to_area_id:type_name -> Reference
	58,  // 86: FareLegRule.from_timeframe_group_id:type_name -> Reference
	58,  // 87: FareLegRule.to_timeframe_group_id:type_name -> Reference
	58,  // 88: FareLegRule.fare_product_id:type_name -> Reference
	58,  // 89: FareTransferRule.from_leg_group_id:type_name -> Reference
	58,  // 90: FareTransferRule.to_leg_group_id:type_name -> Reference
	66,  // 91: FareTransferRule.transfer_count:type_name -> TransferCount
	16,  // 92: FareTransferRule.duration_limit_type:type_name -> DurationLimitType
	15,  // 93: FareTransferRule.fare_transfer_type:type_name -> FareTransferType
	58,  // 94: FareTransferRule.fare_product_id:type_name -> Reference
	56,  // 95: Area.area_id:type_name -> EntityID
	58,  // 96: StopArea.area_id:type_name -> Reference
	58,  // 97: StopArea.stop_id:type_name -> Reference
	56,  // 98: Network.network_id:type_name -> EntityID
	58,  // 99: RouteNetwork.network_id:type_name -> Reference
	58,  // 100: RouteNetwork.route_id:type_name -> Reference
	58,  // 101: Frequency.trip_id:type_name -> Reference
	55,  // 102: Frequency.start_time:type_name -> Seconds
	55,  // 103: Frequency.end_time:type_name -> Seconds
	9,   // 104: Frequency.exact_time:type_name -> FrequencyExactTime
	58,  // 105: Transfer.from_stop_id:type_name -> Reference
	58,  // 106: Transfer.to_stop_id:type_name -> Reference
	58,  // 107: Transfer.from_route_id:type_name -> Reference
	58,  // 108: Transfer.to_route_id:type_name -> Reference
	58,  // 109: Transfer.from_trip_id:type_name -> Reference
	58,  // 110: Transfer.to_trip_id:type_name -> Reference
	10,  // 111: Transfer.transfer_type:type_name -> TransferType
	56,  // 112: Pathway.pathway_id:type_name -> EntityID
	58,  // 113: Pathway.from_stop_id:type_name -> Reference
	58,  // 114: Pathway.to_stop_id:type_name -> Reference
	12,  // 115: Pathway.pathway_mode:type_name -> PathwayMode
	11,  // 116: Pathway.is_bidirectional:type_name -> PathwayDirectionality
	56,  // 117: Level.level_id:type_name -> EntityID
	56,  // 118: LocationGroup.location_group_id:type_name -> EntityID
	58,  // 119: LocationGroupStop.location_group_id:type_name -> Reference
	58,  // 120: LocationGroupStop.stop_id:type_name -> Reference
	56,  // 121: BookingRule.booking_rule_id:type_name -> EntityID
	13,  // 122: BookingRule.booking_type:type_name -> BookingRuleType
	55,  // 123: BookingRule.prior_notice_last_time:type_name -> Seconds
	55,  // 124: BookingRule.prior_notice_start_time:type_name -> Seconds
	58,  // 125: BookingRule.prior_notice_service_id:type_name -> Reference
	59,  // 126: BookingRule.info_url:type_name -> Url
	59,  // 127: BookingRule.booking_url:type_name -> Url
	64,  // 128: Translation.language:type_name -> Language
	59,  // 129: FeedInfo.feed_publisher_url:type_name -> Url
	64,  // 130: FeedInfo.feed_lang:type_name -> Language
	64,  // 131: FeedInfo.default_lang:type_name -> Language
	53,  // 132: FeedInfo.feed_start_date:type_name -> Date
	53,  // 133: FeedInfo.feed_end_date:type_name -> Date
	60,  // 134: FeedInfo.feed_contact_email:type_name -> Email
	59,  // 135: FeedInfo.feed_contact_url:type_name -> Url
	56,  // 136: ShapePoint.shape_id:type_name -> EntityID
	56,  // 137: Shape.shape_id:type_name -> EntityID
	52,  // 138: Shape.shape:type_name -> LineString
	17,  // 139: FareAttributeTransfer.transfer_type:type_name -> FareAttributeTransferType
	140, // [140:140] is the sub-list for method output_type
	140, // [140:140] is the sub-list for method input_type
	140, // [140:140] is the sub-list for extension type_name
	140, // [140:140] is the sub-list for extension extendee
	0,   // [0:140] is the sub-list for field type_name
}

func init() { file_gtfs_proto_init() }
func file_gtfs_proto_init() {
	if File_gtfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gtfs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FeedEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Agency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Stop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Trip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StopTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Calendar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CalendarDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FareAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FareRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Timeframe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FareMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FareProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FareLegRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FareTransferRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Area); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*StopArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RouteNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Frequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Pathway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*LocationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*LocationGroupStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*BookingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Translation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FeedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Attribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ShapePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*Shape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*LineString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Seconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*EntityID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*Timezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*FareAttributeTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfs_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*TransferCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gtfs_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gtfs_proto_goTypes,
		DependencyIndexes: file_gtfs_proto_depIdxs,
		EnumInfos:         file_gtfs_proto_enumTypes,
		MessageInfos:      file_gtfs_proto_msgTypes,
	}.Build()
	File_gtfs_proto = out.File
	file_gtfs_proto_rawDesc = nil
	file_gtfs_proto_goTypes = nil
	file_gtfs_proto_depIdxs = nil
}
